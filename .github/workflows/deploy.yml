name: Deploy to EC2

on:
  push:
    branches: [ stable_server ]
  workflow_dispatch:

env:
  EC2_HOST: ec2-user@ec2-3-87-206-109.compute-1.amazonaws.com
  APP_DIR: /var/www/inkreads
  DOMAIN: theinkreads.com
  EMAIL: 1henrytran@gmail.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run build

      - name: Create deployment package
        run: |
          # Create a temporary directory for the files to transfer
          mkdir -p deploy_temp
          cp -r . deploy_temp/
          cd deploy_temp
          
          # Remove unnecessary files
          rm -rf node_modules .next .git .env.local coverage
          find . -type f -name "._*" -delete
          find . -type f -name ".DS_Store" -delete
          find . -type f -name ".AppleDouble" -delete
          find . -type f -name ".LSOverride" -delete
          
          # Create tar file
          cd ..
          tar -czf deploy.tar.gz -C deploy_temp .

      - name: Deploy to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ec2-user"

      - name: Execute server setup and deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Update system packages
            sudo yum update -y

            # Install Node.js and npm if not installed
            if ! command -v node &> /dev/null; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              . ~/.nvm/nvm.sh
              nvm install 20
              nvm use 20
            fi

            # Install pnpm globally if not installed
            if ! command -v pnpm &> /dev/null; then
              npm install -g pnpm
            fi

            # Install PM2 globally if not installed
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            # Install Nginx and Certbot if not installed
            if ! command -v nginx &> /dev/null; then
              sudo yum install nginx -y
              sudo yum install -y epel-release
              sudo yum install -y certbot python3-certbot-nginx
            fi

            # Create app directory if it doesn't exist
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown ec2-user:ec2-user ${{ env.APP_DIR }}

            # Copy Nginx configuration
            sudo cp ${{ env.APP_DIR }}/deployment/config/nginx.conf /etc/nginx/conf.d/inkreads.conf
            sudo rm -f /etc/nginx/conf.d/default.conf

            # Stop Nginx temporarily for SSL certificate installation
            sudo systemctl stop nginx

            # Get SSL certificate if not exists
            if [ ! -f "/etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem" ]; then
              sudo certbot certonly --standalone -d ${{ env.DOMAIN }} -d www.${{ env.DOMAIN }} --non-interactive --agree-tos --email ${{ env.EMAIL }}
            fi

            # Start Nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx

            # Test Nginx configuration
            sudo nginx -t

            # Clean up old files
            sudo rm -rf ${{ env.APP_DIR }}/*
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown ec2-user:ec2-user ${{ env.APP_DIR }}
            
            # Extract new files
            tar -xzf deploy.tar.gz -C ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}
            
            # Clean up metadata files
            find . -type f -name '._*' -delete
            find . -type f -name '.DS_Store' -delete
            find . -type f -name '.AppleDouble' -delete
            find . -type f -name '.LSOverride' -delete
            
            # Install dependencies
            pnpm install
            
            # Build application
            pnpm run build
            
            # Start the application with PM2
            pm2 delete all || true
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            # Configure PM2 to start on system startup
            sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v20/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user
            
            # Clean up
            rm -f ~/deploy.tar.gz

      - name: Clean up temporary files
        run: |
          rm -rf deploy_temp deploy.tar.gz 