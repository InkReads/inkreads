name: Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  APP_DIR: /var/www/inkreads
  DOMAIN: theinkreads.com
  EMAIL: 1henrytran@gmail.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build application
        run: pnpm run build
        
      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz ./* .next

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ec2-user"

      - name: Execute server setup and deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              . ~/.nvm/nvm.sh
              nvm install 20
              nvm use 20
            fi
            
            # Install pnpm if not present
            if ! command -v pnpm &> /dev/null; then
              npm install -g pnpm
            fi
            
            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            
            # Install Nginx if not present
            if ! command -v nginx &> /dev/null; then
              sudo yum update -y
              sudo yum install nginx -y
              sudo yum install -y epel-release
              sudo yum install -y certbot python3-certbot-nginx
            fi
            
            # Create app directory if it doesn't exist
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown ec2-user:ec2-user ${{ env.APP_DIR }}
            
            # Clean up old files and extract new ones
            cd ${{ env.APP_DIR }}
            rm -rf ./* .next
            tar -xzf /home/ec2-user/deploy.tar.gz
            rm /home/ec2-user/deploy.tar.gz
            
            # Install dependencies and build
            pnpm install
            pnpm run build
            
            # Configure PM2
            pm2 delete inkreads 2>/dev/null || true
            pm2 start pnpm --name "inkreads" -- start
            pm2 save
            sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v20/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user
            
            # Configure Nginx if not already done
            if [ ! -f /etc/nginx/conf.d/inkreads.conf ]; then
              sudo tee /etc/nginx/conf.d/inkreads.conf > /dev/null << EOF
              server {
                  listen 80;
                  server_name ${{ env.DOMAIN }};
                  
                  location / {
                      proxy_pass http://localhost:3000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                  }
              }
              EOF
              
              sudo rm -f /etc/nginx/conf.d/default.conf
              sudo systemctl start nginx
              sudo systemctl enable nginx
              sudo nginx -t && sudo systemctl restart nginx
            fi
            
            # Install SSL certificate if not already done
            if [ ! -f /etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem ]; then
              sudo certbot --nginx -d ${{ env.DOMAIN }} --non-interactive --agree-tos -m ${{ env.EMAIL }}
            fi

      - name: Clean up
        run: rm -f deploy.tar.gz 