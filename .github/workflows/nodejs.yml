name: Node.js CI & Deployment

on:
  push:
    branches: [ main, feat/migrate-react-flask, ai-genre-tag ]
  pull_request:
    branches: [ main, feat/migrate-react-flask, ai-genre-tag ]

jobs:
  build:
    runs-on: [self-hosted, example2]

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      working-directory: ./client
      run: pnpm install --no-strict-peer-dependencies
      
    - name: Build
      working-directory: ./client
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_BOOKS_API_KEY: ${{ secrets.GOOGLE_BOOKS_API_KEY }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
      run: pnpm run build

  deploy:
    needs: build
    runs-on: [self-hosted, example2]
 
    steps:
    - name: Pull latest changes
      run: |
        git pull origin ${{ github.ref }}
        
    - name: Setup environment variables
      run: |
        # Server environment variables
        cd server
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        echo "GOOGLE_BOOKS_API_KEY=${{ secrets.GOOGLE_BOOKS_API_KEY }}" >> .env
        
        # Create service account JSON file
        echo '{
          "type": "service_account",
          "project_id": "'${{ secrets.FIREBASE_PROJECT_ID }}'",
          "private_key_id": "'${{ secrets.FIREBASE_PRIVATE_KEY_ID }}'",
          "private_key": "'${{ secrets.FIREBASE_PRIVATE_KEY }}'",
          "client_email": "'${{ secrets.FIREBASE_CLIENT_EMAIL }}'",
          "client_id": "'${{ secrets.FIREBASE_CLIENT_ID }}'",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "'${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}'"
        }' > service-account.json
        
        # Client environment variables
        cd ../client
        echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > .env
        
    - name: Setup Python environment
      run: |
        cd server
        python3 -m venv venv || true
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: Stop existing processes
      run: |
        echo "Stopping all PM2 processes..."
        pm2 delete all || true
        echo "Checking no processes are running..."
        pm2 list
        
    - name: Start Flask API server
      run: |
        echo "Starting Flask API with Gunicorn..."
        cd server
        source venv/bin/activate
        echo "Python version: $(python3 --version)"
        echo "Gunicorn version: $(gunicorn --version)"
        pm2 start --name api "$(which gunicorn) --bind 0.0.0.0:5001 --workers 4 --access-logfile - app:app"
        echo "API server started. Checking status..."
        pm2 list
        curl -v http://localhost:5001 || true
        
    - name: Start React client
      run: |
        echo "Starting React client..."
        cd client
        pm2 start --name client "pnpm preview --host 0.0.0.0 --port 3000" --cwd ./
        echo "Client started. Checking status..."
        pm2 list
        curl -v http://localhost:3000 || true
        
    - name: Save PM2 configuration
      run: |
        echo "Saving PM2 process list..."
        pm2 save
        echo "Current PM2 processes:"
        pm2 list
        
    - name: Setup Nginx configuration
      run: |
        # Create necessary directories with correct permissions
        sudo mkdir -p /var/log/nginx
        sudo mkdir -p /var/lib/nginx
        sudo mkdir -p /etc/nginx/conf.d
        
        # Set proper permissions
        sudo chown -R nginx:nginx /var/log/nginx
        sudo chown -R nginx:nginx /var/lib/nginx
        sudo chmod 755 /var/log/nginx
        sudo chmod 755 /var/lib/nginx
        
        # Copy our nginx configuration to the correct location
        sudo cp .nginx/inkreads.conf /etc/nginx/conf.d/example.conf
        sudo chmod 644 /etc/nginx/conf.d/example.conf
        
        # Remove default nginx site if it exists
        sudo rm -f /etc/nginx/conf.d/default.conf
        
        # Test nginx configuration
        sudo nginx -t
        
        # Restart nginx
        sudo systemctl stop nginx || sudo service nginx stop || true
        sudo systemctl start nginx || sudo service nginx start
        
    - name: Verify all services
      run: |
        echo "1. Checking PM2 processes..."
        pm2 list
        
        echo "2. Checking ports in use..."
        sudo netstat -tlpn | grep -E ':80|:443|:3000|:5001'
        
        echo "3. Testing API server..."
        curl -v http://localhost:5001/api || true
        
        echo "4. Testing client server..."
        curl -v http://localhost:3000 || true
        
        echo "5. Checking Nginx status..."
        sudo systemctl status nginx || sudo service nginx status
        
        echo "6. Checking Nginx configuration..."
        sudo nginx -T
        
        echo "7. Checking Nginx logs..."
        sudo tail -n 50 /var/log/nginx/error.log || true
        
    - name: Complete job
      run: |
        echo "Deployment completed successfully"
        echo "You can now access:"
        echo "- Main site: https://theinkreads.com"
        echo "- API: https://theinkreads.com/api" 