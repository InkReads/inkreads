name: Node.js CI & Deployment

on:
  push:
    branches: [ main, feat/migrate-react-flask ]
  pull_request:
    branches: [ main, feat/migrate-react-flask ]

jobs:
  build:
    runs-on: [self-hosted, example2]

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      working-directory: ./client
      run: pnpm install --no-strict-peer-dependencies
      
    - name: Build
      working-directory: ./client
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_BOOKS_API_KEY: ${{ secrets.GOOGLE_BOOKS_API_KEY }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
      run: pnpm run build

  deploy:
    needs: build
    runs-on: [self-hosted, example2]
 
    steps:
    - name: Pull latest changes
      run: |
        git pull origin ${{ github.ref }}
        
    - name: Setup environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > server/.env
        echo "GOOGLE_BOOKS_API_KEY=${{ secrets.GOOGLE_BOOKS_API_KEY }}" >> server/.env
        echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> client/.env
        
    - name: Setup Python environment
      run: |
        cd server
        # Create virtual environment if it doesn't exist
        python3 -m venv venv || true
        # Activate virtual environment and install dependencies
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: Stop PM2 processes
      run: |
        pm2 delete all || true
        
    - name: Start PM2 processes
      run: |
        # Start Flask API with virtual environment python
        cd server
        source venv/bin/activate
        which python3  # Debug: show which python3 is being used
        pm2 start --name api "$(which python3) app.py"
        
        # Start client
        cd ../client && pm2 serve dist 3000 --name client --spa
        
    - name: Check SELinux
      run: |
        # Check if SELinux is installed and enabled
        if command -v getenforce &> /dev/null; then
          echo "SELinux status: $(getenforce)"
          # Temporarily set SELinux to permissive mode if it's enforcing
          if [ "$(getenforce)" = "Enforcing" ]; then
            sudo setenforce 0 || true
            echo "Set SELinux to permissive mode"
          fi
        else
          echo "SELinux is not installed"
        fi
        
    - name: Setup Nginx configuration
      run: |
        # Create necessary directories with correct permissions
        sudo mkdir -p /var/log/nginx
        sudo mkdir -p /var/lib/nginx
        sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
        
        # Set proper permissions
        sudo chown -R nginx:nginx /var/log/nginx
        sudo chown -R nginx:nginx /var/lib/nginx
        sudo chmod 755 /var/log/nginx
        sudo chmod 755 /var/lib/nginx
        
        # Remove default nginx site if it exists
        sudo rm -f /etc/nginx/sites-enabled/default
        
        # Copy our nginx configuration
        sudo cp .nginx/inkreads.conf /etc/nginx/sites-available/inkreads.conf
        sudo ln -sf /etc/nginx/sites-available/inkreads.conf /etc/nginx/sites-enabled/inkreads.conf
        
        # Set proper permissions for the configuration
        sudo chown -R root:root /etc/nginx/sites-available
        sudo chown -R root:root /etc/nginx/sites-enabled
        sudo chmod 644 /etc/nginx/sites-available/inkreads.conf
        
        # Test nginx configuration
        sudo nginx -t
        
        # Stop nginx if it's running
        sudo systemctl stop nginx || sudo service nginx stop || true
        
        # Start nginx with proper permissions
        sudo systemctl start nginx || sudo service nginx start
        
    - name: Verify services
      run: |
        echo "Checking PM2 processes..."
        pm2 list
        
        echo "Checking Python version and location..."
        cd server && source venv/bin/activate
        which python3
        python3 --version
        
        echo "Checking API logs..."
        pm2 logs api --lines 10 || true
        
        echo "Checking Nginx status..."
        sudo systemctl status nginx || sudo service nginx status
        sudo cat /var/log/nginx/error.log || true
        
        echo "Checking API endpoint..."
        curl -I https://theinkreads.com/api || true
        
        echo "Checking main site..."
        curl -I https://theinkreads.com || true
        
    - name: Complete job
      run: |
        echo "Deployment completed successfully" 